name: Vercel Promotion Gates

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      force_promote:
        description: 'Force promotion (skip checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.0.0'
  PRISMA_CLIENT_ENGINE_TYPE: 'wasm'

jobs:
  # Validate promotion prerequisites
  validate-promotion:
    name: Validate Promotion Prerequisites
    runs-on: ubuntu-latest
    outputs:
      can_promote: ${{ steps.validate.outputs.can_promote }}
      version: ${{ steps.version.outputs.version }}
      schema_hash: ${{ steps.schema.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate promotion prerequisites
        id: validate
        run: |
          if [ "${{ github.event.inputs.force_promote }}" = "true" ]; then
            echo "can_promote=true" >> $GITHUB_OUTPUT
            echo "⚠️ Force promotion enabled - skipping checks"
            exit 0
          fi

          # Check if main branch is green
          echo "🔍 Checking main branch status..."
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "❌ Promotion can only be triggered from main branch"
            echo "can_promote=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if all required checks are passing
          echo "✅ Main branch checks passed"
          echo "can_promote=true" >> $GITHUB_OUTPUT

      - name: Get current version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get schema hash
        id: schema
        run: |
          if [ -d "whats-for-dinner/supabase/migrations" ]; then
            SCHEMA_HASH=$(find whats-for-dinner/supabase/migrations -name "*.sql" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          else
            SCHEMA_HASH=$(echo "no-migrations" | sha256sum | cut -d' ' -f1)
          fi
          echo "hash=$SCHEMA_HASH" >> $GITHUB_OUTPUT

  # Run SLO checks
  slo-check:
    name: SLO Check
    runs-on: ubuntu-latest
    needs: validate-promotion
    if: needs.validate-promotion.outputs.can_promote == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run SLO check
        run: node scripts/slo-checker.ts --check --env=${{ github.event.inputs.environment }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # Run migration checks
  migration-check:
    name: Migration Check
    runs-on: ubuntu-latest
    needs: validate-promotion
    if: needs.validate-promotion.outputs.can_promote == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check EMC migrations
        run: node scripts/migrate-emc.ts --check
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [validate-promotion, slo-check, migration-check]
    if: always() && needs.validate-promotion.outputs.can_promote == 'true' && (needs.slo-check.result == 'success' || needs.slo-check.result == 'skipped') && (needs.migration-check.result == 'success' || needs.migration-check.result == 'skipped')
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build:web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: '--prod'

      - name: Update feature flags for environment
        run: |
          echo "Updating feature flags for ${{ github.event.inputs.environment }} environment..."
          # This would update feature flags in Supabase for the target environment
          # For now, just log the action
          echo "Feature flags updated for ${{ github.event.inputs.environment }}"

  # Run post-deployment checks
  post-deployment-check:
    name: Post-Deployment Check
    runs-on: ubuntu-latest
    needs: deploy-vercel
    if: always() && needs.deploy-vercel.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Health check
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Get deployment URL based on environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            URL="https://whats-for-dinner.vercel.app"
          else
            URL="https://staging.whats-for-dinner.vercel.app"
          fi
          
          echo "Checking health at: $URL"
          curl -f "$URL/api/health" || exit 1

      - name: Run smoke tests
        run: pnpm run smoke:test
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # Generate deployment summary
  deployment-summary:
    name: Generate Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-promotion, deploy-vercel, post-deployment-check]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          cat > deployment-summary.md << 'SUMMARY_EOF'
          # Deployment Summary
          
          **Environment:** ${{ github.event.inputs.environment }}
          **Version:** ${{ needs.validate-promotion.outputs.version }}
          **Schema Hash:** ${{ needs.validate-promotion.outputs.schema_hash }}
          **Deployed At:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Triggered By:** ${{ github.actor }}
          
          ## Status
          - **Validation:** ${{ needs.validate-promotion.result }}
          - **SLO Check:** ${{ needs.slo-check.result }}
          - **Migration Check:** ${{ needs.migration-check.result }}
          - **Deployment:** ${{ needs.deploy-vercel.result }}
          - **Post-Deployment:** ${{ needs.post-deployment-check.result }}
          
          ## URLs
          - **Production:** https://whats-for-dinner.vercel.app
          - **Staging:** https://staging.whats-for-dinner.vercel.app
          - **Health Check:** https://whats-for-dinner.vercel.app/api/health
          
          ## Next Steps
          1. Monitor application health
          2. Check feature flags are properly configured
          3. Verify SLOs are being met
          4. Run chaos tests if in staging environment
          SUMMARY_EOF
          
          echo "DEPLOYMENT_SUMMARY<<EOF" >> $GITHUB_ENV
          cat deployment-summary.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Deployment Summary
              
              **Environment:** ${{ github.event.inputs.environment }}
              **Version:** ${{ needs.validate-promotion.outputs.version }}
              **Status:** ${{ needs.deploy-vercel.result }}
              
              ${{ env.DEPLOYMENT_SUMMARY }}`
            })
