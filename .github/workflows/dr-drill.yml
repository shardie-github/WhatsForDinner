name: Disaster Recovery Drill

on:
  schedule:
    # Run monthly on the first Monday at 2 AM UTC
    - cron: '0 2 1-7 * 1'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for DR test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_cleanup:
        description: 'Skip cleanup (for debugging)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.0.0'
  PRISMA_CLIENT_ENGINE_TYPE: 'wasm'

jobs:
  # Run DR validation
  dr-validation:
    name: DR Validation
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run DR validation
        run: node scripts/clone-and-restore-check.ts
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Upload DR report
        uses: actions/upload-artifact@v4
        with:
          name: dr-report-${{ github.run_number }}
          path: REPORTS/dr-report-*.json
          retention-days: 90

  # Generate DR summary
  dr-summary:
    name: Generate DR Summary
    runs-on: ubuntu-latest
    needs: dr-validation
    if: always()
    steps:
      - name: Download DR report
        uses: actions/download-artifact@v4
        with:
          name: dr-report-${{ github.run_number }}

      - name: Generate DR summary
        run: |
          # Find the latest DR report
          REPORT_FILE=$(find . -name "dr-report-*.json" | head -1)
          
          if [ -f "$REPORT_FILE" ]; then
            # Extract key metrics from the report
            OVERALL_STATUS=$(jq -r '.overall_status' "$REPORT_FILE")
            RESTORE_SUCCESS=$(jq -r '.restore_success' "$REPORT_FILE")
            RESTORE_TIME=$(jq -r '.restore_time_seconds' "$REPORT_FILE")
            CHECKSUM_RESULTS=$(jq -r '.checksum_results | length' "$REPORT_FILE")
            FAILED_CHECKSUMS=$(jq -r '.checksum_results | map(select(.status == "failed")) | length' "$REPORT_FILE")
            
            cat > dr-summary.md << 'SUMMARY_EOF'
          # Disaster Recovery Drill Summary
          
          **Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Environment:** ${{ github.event.inputs.environment || 'staging' }}
          **Overall Status:** $OVERALL_STATUS
          
          ## Results
          - **Restore Success:** $RESTORE_SUCCESS
          - **Restore Time:** ${RESTORE_TIME}s
          - **Checksum Tests:** $CHECKSUM_RESULTS
          - **Failed Checksums:** $FAILED_CHECKSUMS
          
          ## Recommendations
          $(jq -r '.recommendations[]' "$REPORT_FILE" | sed 's/^/- /')
          
          ## Full Report
          The complete DR report is available as a workflow artifact.
          SUMMARY_EOF
          
          echo "DR_SUMMARY<<EOF" >> $GITHUB_ENV
          cat dr-summary.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          else
            echo "DR_SUMMARY<<EOF" >> $GITHUB_ENV
            echo "# DR Drill Failed" >> $GITHUB_ENV
            echo "No DR report was generated. Check the workflow logs for details." >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Comment on workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸš¨ Disaster Recovery Drill Results
              
              **Environment:** ${{ github.event.inputs.environment || 'staging' }}
              **Status:** ${{ needs.dr-validation.result }}
              
              ${{ env.DR_SUMMARY }}`
            })

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [dr-validation, dr-summary]
    if: failure()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ðŸš¨ DR Drill Failed
            
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.run_number }}
            
            Check the workflow logs for details.
