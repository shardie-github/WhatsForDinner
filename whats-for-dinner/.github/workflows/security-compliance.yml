name: Security and Compliance Automation

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of security audit to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - rls
          - cors
          - compliance
          - vulnerability

env:
  NODE_VERSION: '20'

jobs:
  # Dependency security audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'dependencies' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "🔍 Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          if [ -s npm-audit-results.json ]; then
            HIGH_CRITICAL=$(cat npm-audit-results.json | jq '[.vulnerabilities[] | select(.severity == "high" or .severity == "critical")] | length')
            if [ "$HIGH_CRITICAL" -gt 0 ]; then
              echo "❌ High or critical vulnerabilities found in dependencies"
              exit 1
            fi
          fi

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'whats-for-dinner'
          path: '.'
          format: 'JSON'
          out: 'dependency-check-report.json'

      - name: Upload dependency audit results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-results
          path: |
            npm-audit-results.json
            snyk-results.json
            dependency-check-report.json

  # Secrets audit
  secrets-audit:
    name: Secrets Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'secrets' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run detect-secrets
        run: |
          echo "🔍 Running detect-secrets..."
          pip install detect-secrets
          detect-secrets scan --all-files > secrets-scan.txt || true

      - name: Upload secrets audit results
        uses: actions/upload-artifact@v4
        with:
          name: secrets-audit-results
          path: secrets-scan.txt

  # RLS audit
  rls-audit:
    name: Row Level Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'rls' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run RLS validation
        run: |
          echo "🔒 Running RLS validation..."
          # Check for RLS policies in Supabase migrations
          find supabase/migrations -name "*.sql" -exec grep -l "RLS\|ROW LEVEL SECURITY" {} \; > rls-policies.txt
          if [ ! -s rls-policies.txt ]; then
            echo "❌ No RLS policies found in migrations"
            exit 1
          fi

      - name: Upload RLS audit results
        uses: actions/upload-artifact@v4
        with:
          name: rls-audit-results
          path: rls-policies.txt

  # CORS audit
  cors-audit:
    name: CORS Configuration Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'cors' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run CORS audit
        run: |
          echo "🌐 Running CORS audit..."
          # Check CORS configuration in API routes
          find src/app/api -name "*.ts" -exec grep -l "cors\|CORS" {} \; > cors-configs.txt
          if [ ! -s cors-configs.txt ]; then
            echo "❌ No CORS configuration found in API routes"
            exit 1
          fi

      - name: Upload CORS audit results
        uses: actions/upload-artifact@v4
        with:
          name: cors-audit-results
          path: cors-configs.txt

  # Compliance audit
  compliance-audit:
    name: Compliance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'compliance' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run GDPR compliance check
        run: |
          echo "🔒 Running GDPR compliance check..."
          # Check for GDPR compliance in privacy policy and data handling
          if [ ! -f "privacy-policy.md" ]; then
            echo "❌ Privacy policy not found"
            exit 1
          fi
          echo "✅ Privacy policy found" > gdpr-compliance.txt

      - name: Run SOC2 compliance check
        run: |
          echo "🏢 Running SOC2 compliance check..."
          # Check for SOC2 compliance requirements
          if [ ! -f "docs/compliance/SOC2.md" ]; then
            echo "❌ SOC2 documentation not found"
            exit 1
          fi
          echo "✅ SOC2 documentation found" >> soc2-compliance.txt

      - name: Run HIPAA compliance check
        run: |
          echo "🏥 Running HIPAA compliance check..."
          # Check for HIPAA compliance requirements
          if [ ! -f "docs/compliance/HIPAA.md" ]; then
            echo "❌ HIPAA documentation not found"
            exit 1
          fi
          echo "✅ HIPAA documentation found" >> hipaa-compliance.txt

      - name: Upload compliance audit results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-audit-results
          path: |
            gdpr-compliance.txt
            soc2-compliance.txt
            hipaa-compliance.txt

  # Vulnerability assessment
  vulnerability-assessment:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'vulnerability' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/typescript
            p/react
            p/nextjs
          generateSarif: '1'

      - name: Upload Semgrep results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # Key rotation
  key-rotation:
    name: Automated Key Rotation
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run key rotation check
        run: |
          echo "🔑 Running key rotation check..."
          # Check if keys need rotation
          node scripts/security/key-rotation.js check

      - name: Rotate keys if needed
        run: |
          echo "🔄 Rotating keys if needed..."
          # Rotate keys if they are older than 90 days
          node scripts/security/key-rotation.js rotate
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

  # Security configuration audit
  security-config-audit:
    name: Security Configuration Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check security headers
        run: |
          echo "🛡️ Checking security headers..."
          # Check for security headers in middleware
          if [ ! -f "src/middleware.ts" ]; then
            echo "❌ Middleware not found"
            exit 1
          fi
          grep -q "X-Frame-Options\|X-Content-Type-Options\|X-XSS-Protection" src/middleware.ts || echo "❌ Security headers not found"
          echo "✅ Security headers check completed" > security-headers.txt

      - name: Check HTTPS configuration
        run: |
          echo "🔒 Checking HTTPS configuration..."
          # Check for HTTPS configuration
          if [ ! -f "next.config.ts" ]; then
            echo "❌ Next.js config not found"
            exit 1
          fi
          echo "✅ HTTPS configuration check completed" >> https-config.txt

      - name: Check authentication configuration
        run: |
          echo "🔐 Checking authentication configuration..."
          # Check for authentication configuration
          if [ ! -f "src/lib/auth.ts" ]; then
            echo "❌ Authentication configuration not found"
            exit 1
          fi
          echo "✅ Authentication configuration check completed" >> auth-config.txt

      - name: Upload security config audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-config-audit-results
          path: |
            security-headers.txt
            https-config.txt
            auth-config.txt

  # Security testing
  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'full' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run security tests
        run: |
          echo "🧪 Running security tests..."
          # Run security tests
          npm run test:security

      - name: Run penetration tests
        run: |
          echo "🔍 Running penetration tests..."
          # Run penetration tests
          npm run test:penetration

      - name: Run load tests
        run: |
          echo "⚡ Running load tests..."
          # Run load tests
          npm run test:load

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: test-results/

  # Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, secrets-audit, rls-audit, cors-audit, compliance-audit, vulnerability-assessment, key-rotation, security-config-audit, security-testing]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "📊 Generating security report..."
          # Generate comprehensive security report
          cat dependency-audit-results/npm-audit-results.json > security-report.md
          echo "" >> security-report.md
          echo "## Secrets Audit" >> security-report.md
          cat secrets-audit-results/secrets-scan.txt >> security-report.md
          echo "" >> security-report.md
          echo "## RLS Audit" >> security-report.md
          cat rls-audit-results/rls-policies.txt >> security-report.md
          echo "" >> security-report.md
          echo "## CORS Audit" >> security-report.md
          cat cors-audit-results/cors-configs.txt >> security-report.md
          echo "" >> security-report.md
          echo "## Compliance Audit" >> security-report.md
          cat compliance-audit-results/gdpr-compliance.txt >> security-report.md
          echo "" >> security-report.md
          echo "## Security Configuration Audit" >> security-report.md
          cat security-config-audit-results/security-headers.txt >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Report\n\n${report}`
            });

  # Notify security team
  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (needs.dependency-audit.result == 'failure' || needs.secrets-audit.result == 'failure' || needs.rls-audit.result == 'failure' || needs.cors-audit.result == 'failure' || needs.compliance-audit.result == 'failure' || needs.vulnerability-assessment.result == 'failure' || needs.key-rotation.result == 'failure' || needs.security-config-audit.result == 'failure' || needs.security-testing.result == 'failure')
    steps:
      - name: Notify Slack Security Channel
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Notify PagerDuty
        run: |
          echo "🚨 Notifying PagerDuty..."
          # Send alert to PagerDuty
          curl -X POST ${{ secrets.PAGERDUTY_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{"routing_key":"'${{ secrets.PAGERDUTY_ROUTING_KEY }}'","event_action":"trigger","payload":{"summary":"Security audit failed","source":"GitHub Actions","severity":"critical"}}'

      - name: Notify email
        run: |
          echo "📧 Sending email notification..."
          # Send email notification
          echo "Security audit failed for ${{ github.repository }}" | mail -s "Security Alert" ${{ secrets.SECURITY_EMAIL }}