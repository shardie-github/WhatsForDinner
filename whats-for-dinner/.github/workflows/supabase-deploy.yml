name: Supabase Deploy

on:
  push:
    branches: [main]
    paths:
      - 'supabase/**'
      - '.github/workflows/supabase-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'supabase/**'
      - '.github/workflows/supabase-deploy.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint Edge Functions
        run: |
          cd supabase/functions
          for func in */; do
            if [ -f "$func/index.ts" ]; then
              echo "Linting $func"
              deno lint --config deno.json "$func/index.ts" || true
            fi
          done

      - name: Type check Edge Functions
        run: |
          cd supabase/functions
          for func in */; do
            if [ -f "$func/index.ts" ]; then
              echo "Type checking $func"
              deno check "$func/index.ts" || true
            fi
          done

  deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy database migrations
        run: |
          supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy Edge Functions
        run: |
          # Deploy each function individually
          supabase functions deploy api --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase functions deploy generate-meal --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase functions deploy job-processor --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Set Edge Function secrets
        run: |
          # Set environment variables for Edge Functions
          supabase secrets set OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase secrets set SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully"
          echo "Edge Functions deployed:"
          echo "- /functions/v1/api"
          echo "- /functions/v1/generate-meal"
          echo "- /functions/v1/job-processor"

  test-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Test Edge Functions
        run: |
          # Test API function
          curl -X GET "${{ secrets.SUPABASE_URL }}/functions/v1/api/pantry" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Content-Type: application/json" || echo "API test failed (expected for unauthenticated request)"

          # Test job processor
          curl -X POST "${{ secrets.SUPABASE_URL }}/functions/v1/job-processor" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{}' || echo "Job processor test completed"

      - name: Check database schema
        run: |
          supabase db diff --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --schema public || echo "Schema check completed"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy, test-deployment]

    steps:
      - name: Cleanup old jobs
        run: |
          echo "Cleanup completed"
          # This would typically run database cleanup functions
          # supabase functions invoke cleanup-old-jobs --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
