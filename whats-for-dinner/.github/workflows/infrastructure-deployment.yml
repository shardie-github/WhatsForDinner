name: Infrastructure Deployment

on:
  push:
    branches: [main, develop]
    paths: ['infra/**']
  pull_request:
    branches: [main, develop]
    paths: ['infra/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  TF_WORKING_DIR: 'infra/terraform'

jobs:
  # Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive ${{ env.TF_WORKING_DIR }}/

      - name: Terraform Init
        run: terraform init -backend=false ${{ env.TF_WORKING_DIR }}/

      - name: Terraform Validate
        run: terraform validate ${{ env.TF_WORKING_DIR }}/

      - name: Terraform Plan
        run: |
          cd ${{ env.TF_WORKING_DIR }}/
          terraform plan -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
                         -var="vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}" \
                         -var="supabase_access_token=${{ secrets.SUPABASE_ACCESS_TOKEN }}" \
                         -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/tfplan

  # Terraform Apply
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.action == 'apply'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init ${{ env.TF_WORKING_DIR }}/

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/

      - name: Terraform Apply
        run: |
          cd ${{ env.TF_WORKING_DIR }}/
          terraform apply -auto-approve tfplan

      - name: Output Terraform values
        run: |
          cd ${{ env.TF_WORKING_DIR }}/
          terraform output -json > terraform-outputs.json

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ env.TF_WORKING_DIR }}/terraform-outputs.json

  # Terraform Destroy
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init ${{ env.TF_WORKING_DIR }}/

      - name: Terraform Destroy
        run: |
          cd ${{ env.TF_WORKING_DIR }}/
          terraform destroy -auto-approve \
            -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
            -var="vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}" \
            -var="supabase_access_token=${{ secrets.SUPABASE_ACCESS_TOKEN }}"

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Cost analysis
  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ env.TF_WORKING_DIR }}/

      - name: Run Infracost
        uses: infracost/infracost-gh-action@v0.10
        with:
          api_key: ${{ secrets.INFRACOST_API_KEY }}
          path: ${{ env.TF_WORKING_DIR }}
          format: table
          show_skipped: false

      - name: Comment PR
        uses: infracost/infracost-gh-action@v0.10
        with:
          api_key: ${{ secrets.INFRACOST_API_KEY }}
          path: ${{ env.TF_WORKING_DIR }}
          format: github-comment
          show_skipped: false