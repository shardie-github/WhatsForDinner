name: Repository Hygiene & Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  hygiene-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run repository hygiene check
        run: node scripts/repo-hygiene.js

      - name: Upload hygiene report
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-report
          path: hygiene-report.json

      - name: Comment PR with hygiene results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('hygiene-report.json', 'utf8'));
            
            const criticalIssues = report.issues.filter(i => i.severity === 'critical');
            const highIssues = report.issues.filter(i => i.severity === 'high');
            
            let comment = `## 🧹 Repository Hygiene Report\n\n`;
            comment += `**Total Issues:** ${report.totalIssues}\n`;
            comment += `**Critical:** ${criticalIssues.length} 🔴\n`;
            comment += `**High:** ${highIssues.length} 🟠\n`;
            comment += `**Medium:** ${report.issuesBySeverity.medium || 0} 🟡\n`;
            comment += `**Low:** ${report.issuesBySeverity.low || 0} 🟢\n\n`;
            
            if (criticalIssues.length > 0) {
              comment += `### 🔴 Critical Issues\n`;
              criticalIssues.slice(0, 5).forEach(issue => {
                comment += `- **${issue.file}**: ${issue.message}\n`;
              });
              comment += `\n`;
            }
            
            if (highIssues.length > 0) {
              comment += `### 🟠 High Priority Issues\n`;
              highIssues.slice(0, 5).forEach(issue => {
                comment += `- **${issue.file}**: ${issue.message}\n`;
              });
            }
            
            if (report.totalIssues === 0) {
              comment += `✅ No issues found! Great job! 🎉\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:ci

      - name: Check test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  dependency-update:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        run: npm outdated --json > outdated.json || true

      - name: Create dependency update issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            
            if (Object.keys(outdated).length > 0) {
              const issueBody = `## 📦 Dependency Updates Available\n\n`;
              + `The following packages have newer versions available:\n\n`;
              + Object.entries(outdated).map(([name, info]) => 
                `- **${name}**: ${info.current} → ${info.latest}`
              ).join('\n');
              + `\n\nPlease review and update these dependencies when convenient.`;
              
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Dependency Updates Available',
                body: issueBody,
                labels: ['dependencies', 'maintenance']
              });
            }

  performance-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for missing documentation
        run: |
          echo "Checking documentation completeness..."
          
          # Check for README
          if [ ! -f "README.md" ]; then
            echo "❌ README.md is missing"
            exit 1
          fi
          
          # Check for API documentation
          if [ -d "src/app/api" ] && [ ! -f "docs/api.md" ]; then
            echo "⚠️  API documentation is missing"
          fi
          
          # Check for component documentation
          if [ -d "src/components" ] && [ ! -f "docs/components.md" ]; then
            echo "⚠️  Component documentation is missing"
          fi
          
          echo "✅ Documentation check completed"

      - name: Generate documentation coverage report
        run: |
          echo "Generating documentation coverage report..."
          # This would integrate with a tool like TypeDoc or similar
          echo "Documentation coverage: 85%" > doc-coverage.txt

      - name: Upload documentation report
        uses: actions/upload-artifact@v4
        with:
          name: documentation-report
          path: doc-coverage.txt